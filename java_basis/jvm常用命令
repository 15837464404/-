如何获取进程中所有标志的值:   jinfo -flags process_id
获得对应用生效的 JVM 调优标志:  jcmd process_id VM.flags [-all]
对象内存分布：  jcmd pid GC.class_histogram
导出堆文件： jcmd process_id GC.heap_dump /path/to/heap_dump.hprof

选择编译器类型： 
client类型： 通常称c1编译器。
server类型：  通常称c2编译器， 分层编译只能运行在c2模式下， 可通过参数 -XX:+TieredCompilation 开启。
两种编译器的最主要的差别在于编译代码的时机不同。client 编译器开启编译比 server 编 译器要早。意味着在代码执行的开始阶段，
client 编译器比 server 编译器要快，因为它的 编译代码相比 server 编译器而言要多。此处工程上考虑的权衡是，
server 编译器等待编译的时候是否还能做更有价值的事:server 编译器在编译代码时可以更好地进行优化。最终，server 编译器生成的代码要比 client 编 译器快。
从用户角度看，权衡的取舍在于程序要运行多久，程序的启动时间有多重要。此处最明显的问题是，为什么需要人来做这种选择?
为什么 JVM 不能在启动时用 client 编 译器，然后随着代码变热使用 server 编译器?这种技术被称为分层编译。
代码先由 client 编译器编译，随着代码变热，由 server 编译器重新编译。Java 8 中，分层编译默认为开启。


调优代码缓存
JVM 编译代码时，会在代码缓存中保留编译之后的汇编语言指令集。代码缓存的大小固 定，所以一旦填满，JVM 就不能编译更多代码了。
很显然，如果代码缓存过小，就可能会有问题。一些热点被编译了，而其他则没有，最终 导致应用的大部分代码都是解释运行(非常慢)。
代码缓存填满时，JVM(通常)会发出以下警告:
     Java HotSpot(TM) 64-Bit Server VM warning: CodeCache is full.
              Compiler has been disabled.
     Java HotSpot(TM) 64-Bit Server VM warning: Try increasing the
              code cache size using -XX:ReservedCodeCacheSize=

